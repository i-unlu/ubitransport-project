openapi: 3.0.0
info:
  title: AUSG
  version: '0.1'
servers:
  -
    url: 'http://api.ubitransport.student-grading.fr/v1'
    description: 'Api Ubitransport Student Grading'
paths:
  '/{studentToEdit}':
    post:
      tags:
        - Student
      summary: 'Edit a student'
      description: 'Edit a student'
      operationId: editStudent
      parameters:
        -
          name: studentToEdit
          in: path
          description: 'student to edit'
          required: true
          schema:
            type: integer
        -
          name: studentInformations
          in: query
          description: 'student informations for edition'
          required: true
          schema:
            $ref: '#/components/schemas/Student'
      responses:
        '200':
          description: 'Student edited'
        '404':
          description: 'Student no found'
        '422':
          description: 'Invalid student'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
      security:
        -
          bearer: []
  '/student/{studentToDelete}':
    delete:
      tags:
        - Student
      summary: 'Delete a student'
      description: 'Delete a student'
      operationId: deleteStudent
      parameters:
        -
          name: studentToDelete
          in: path
          description: 'student to delete'
          required: true
          schema:
            $ref: '#/components/schemas/Student'
      responses:
        '204':
          description: 'Student deleted'
        '404':
          description: 'Student no found'
        '503':
          description: 'Maintenance site'
        default:
          description: 'an "unexpected" error'
      security:
        -
          bearer: []
  '/{student}/average-note':
    get:
      tags:
        - Student
      summary: 'Get average note for a student'
      description: 'Get average note for a student'
      operationId: getAverageNoteByStudent
      parameters:
        -
          name: student
          in: path
          description: 'student for which the average is calculated'
          required: true
          schema:
            $ref: '#/components/schemas/Student'
      responses:
        '200':
          description: 'Get average note calculated'
          content:
            application/json:
              schema:
                properties:
                  average: { description: 'Get average note for a student.', type: float }
                type: object
        '404':
          description: 'Student no found'
        '503':
          description: 'Maintenance site'
        default:
          description: 'an "unexpected" error'
      security:
        -
          bearer: []
  /average-note:
    get:
      tags:
        - SubjectNote
      summary: 'Get average note for all students'
      description: 'Get average note for all students'
      operationId: getAverageNote
      responses:
        '200':
          description: 'Get average note calculated for all students.'
          content:
            application/json:
              schema:
                properties:
                  average: { description: 'Get average note for all students.', type: float }
                type: object
        '503':
          description: 'Maintenance site'
        default:
          description: 'an "unexpected" error'
      security:
        -
          bearer: []
components:
  schemas:
    Student:
      description: 'Student model'
      required:
        - lastName
        - firstName
        - birthDate
      properties:
        id:
          description: Identifier.
          type: integer
          example: '12'
        lastName:
          description: 'Last name.'
          type: string
          example: UNLU
        firstName:
          description: 'Last name.'
          type: string
          example: izzetali
        birthDate:
          description: 'Birth date.'
          type: string
          format: date
          example: '1981-03-22'
        createdAt:
          type: string
          format: date-time
          example: '2020-03-13 12:10:45+01:00'
        updatedAt:
          type: string
          format: date-time
          example: '2020-03-13 12:10:45+01:00'
      type: object
    SubjectNote:
      description: 'Subject note model'
      required:
        - subject
        - note
        - student
      properties:
        id:
          description: Identifier.
          type: integer
          example: '12'
        subject:
          description: Subject.
          type: string
          example: Histoire
        note:
          description: Note.
          type: float
          example: '12.50'
        student:
          description: Student.
          type: object
        createdAt:
          type: string
          format: date-time
          example: '2020-03-13 12:10:45+01:00'
        updatedAt:
          type: string
          format: date-time
          example: '2020-03-13 12:10:45+01:00'
      type: object
